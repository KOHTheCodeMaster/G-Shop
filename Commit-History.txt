
Time Stamp: 7th Aug 2K24 - 09:57 AM..!!

Title: G-Shop - Commit History - Change Log

Category: Documentation -> Commit History -> Change Log

Keywords: Angular, G-Shop, Commit History, Change Log, Version Control, Documentation

Purpose: Track changes and updates of each Commit in the G-Shop project for version control and documentation.

Version: 0.1

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/

----------------------------------------------------------------------------------------------------


Commit History - Change Log
---------------------------

Commit: #61 - Fixed cart product reference issue using deep copy, resolved order ID generation in Checkout, and noted future investigation on cart list updates

Time Started: 15th Aug 2K24 - 06:41 PM    |    Time Ended:   15th Aug 2K24 - 07:55 PM    |    Duration:    1 hour 14 minutes

Changes:
--------

1. Important Lesson Learnt - "Always use deep copy while initializing or updating objects to avoid reference issues."
  - File: `shopping-cart.service.ts`
  - Minor Issue of wrong initialization of cartProducts using reference instead of deep copy.
  - When the user cart was updated, due to reference issues, it updated cart products for guest & current user carts.
  - Fixed the issue by using deep copy of cart products while updating the cart data.
    ```
      // existingCart.cartProducts = cart.cartProducts;                           //  This will cause reference issues
      existingCart.cartProducts = JSON.parse(JSON.stringify(cart.cartProducts));  //  Deep copy of cart products
    ```

2. Checkout Component - Fixed order Id generation issue
   - File: `checkout.component.ts`
   - Added `initializeOrderIdCounter()` method to initialize the `orderIdCounter` for generating unique order ids.
   - Using current user's last order id + 1 as the new order id for the order being placed.
   - Incremented the `orderIdCounter` after placing each order to ensure the uniqueness of order ids.

3. To-Do - #10 - Marked For Future Reference - Understand why updating the cart list with the updated user cart is not required
    - When product is added / removed from the user cart, do we need to update the cart list with the updated user cart?
    - No, as we are updating the userCart object directly, the cart list will be updated automatically.

----------------------------------------------------------------------------------------------------

#60 - Added user change handling, synchronized cart updates with `cartUpdated` event, and updated product quantities in Product Card

Time Started: 15th Aug 2K24 - 05:45 PM    |    Time Ended:   15th Aug 2K24 - 06:22 PM    |    Duration:    37 minutes

Changes:
--------

1. Added `loggedInUserChanged()` method in App Component to handle user change events.
   - File: `app.component.ts`
   - Implemented `loggedInUserChanged()` method to handle user change events in a separate method.
   - Whenever the user is changed, `cartUpdated` event is emitted to notify Navbar to update the shopping cart items count & Product Card to update the product quantity.
   - `initializeUserCart()` method from the Shopping Cart Service is used to copy the guest cart to the user cart if the user cart is empty and the guest cart is not.

2. Updated Shopping Cart Service to use `cartUpdated` event to notify Navbar & Product Card Components.
   - File: `shopping-cart.service.ts`
   - `cartUpdated` event is emitted whenever the cart is updated with new products or quantity changes.
   - Refactored `updateCartForUserId()` to `copyGuestCartToUserCart()` for better clarity.

3. Updated Product Card Component to handle product quantity changes using `cartUpdated` event.
   - File: `product-card.component.ts`
   - Subscribed to the `cartUpdated` event to update the product quantity when the cart is updated.

----------------------------------------------------------------------------------------------------

Commit: #59 - User-specific Cart Management, Updated Components to handle multi-user cart data, and Enhanced options & test menu for multiple users & clearing local storage

Total Time:   1 hour 43 minutes
- Time Started: 15th Aug 2K24 - 12:36 PM    |    Time Ended:   15th Aug 2K24 - 12:56 PM    |    Duration:    20 minutes
- Time Started: 15th Aug 2K24 - 12:02 PM    |    Time Ended:   15th Aug 2K24 - 12:19 PM    |    Duration:    17 minutes
- Time Started: 15th Aug 2K24 - 10:48 AM    |    Time Ended:   15th Aug 2K24 - 11:21 AM    |    Duration:    33 minutes
- Time Started: 14th Aug 2K24 - 08:52 PM    |    Time Ended:   14th Aug 2K24 - 09:25 AM    |    Duration:    33 minutes
- Time Started: 14th Aug 2K24 - 07:15 PM    |    Time Ended:   14th Aug 2K24 - 08:15 PM    |    Duration:    1 hour

Changes:
--------

1. MAJOR CHANGES - Updated Shopping Cart Service significantly to handle cart data for multiple users
   - File: `shopping-cart.service.ts`
   - Added `initializeUserCart()` method to initialize the cart data for the current user.
      - When the user is a guest user, initialize the cart data for the guest user.
      - When the user is an authenticated user, initialize the cart data for the authenticated user.
      - When the User Cart is empty, and Guest Cart is available, initialize the User Cart with the Guest Cart data.
      - When the User Cart is already initialized, fetch the cart data from local storage and update the cart data accordingly.
      - This ensures that the cart data is correctly initialized based on the logged-in user.
   - Added the below cart utility methods to handle cart data for multiple users:
      `getCartForGuestUser()`, `getCartForCurrentUser()`, `getCartByUserId()`
   - Added `getCopyOfCart()` method to create a deep copy of the cart data to avoid reference issues.

   - Removed `cartProductList` field & `initCartProductList()` method as it is not required anymore.
   - Injected AuthService in the constructor to access the current user id, guest user & specific user data.
   - Updated `getEmptyCartForGuestUser()` method to use `getGuestUser()` method from AuthService instead of hard-coded data.
   - Updated `getProductQuantity()` method to initialize the product qty based on the current user's cart data.
   - Updated the below methods to handle user-specific cart data and initialize the cart data accordingly:
      `addProductToCart()`, `removeProductFromCart()` & `removeAllProductsFromCart()`, `updateCartForUserId()`

2. Initialize User specific Cart Data Whenever the logged-in User is changed
   - File: `app.component.ts`
   - Using `initializeCurrentUserCart()` method from the Shopping Cart Service to initialize the cart data for the current user whenever the logged-in user is changed.

3. Added 'Login John' & 'Clear Local Storage' option in Testing Menu Component
   - File: `testing-menu.component.html`, `testing-menu.component.ts`
   - Added 'Login John' button to authenticate the user as John Doe.
   - Added 'Clear Local Storage' button to clear the local storage including returnUrl, shopping-cart, orders, products
   - Refactored methods to maintain consistency in naming conventions.
      `loginUserAdminBtnClicked()`  -->   `loginAdminUserBtnClicked()`
      `loginUserTestBtnClicked()`   -->   `loginTestUser1BtnClicked()`

4. Updated Options Menu Component - Removed the access to 'My Orders' for Admin User & Removed 'Manage Orders' Feature
   - File: `my-orders.component.ts`
   - Updated the Options Menu Component to restrict access to 'My Orders' for Admin User as it will not have any orders.
   - Admin User will not be able to access the My Orders page.
   - Removed 'Manage Orders' feature from the Application as it is out of scope for the current project.

5. Navbar Component - Replaced `getCart()` with `getCartForCurrentUser()` to fetch the cart data for the current user
   - File: `navbar.component.ts`
   - Updated the constructor to fetch the cart data for the current user using `getCartForCurrentUser()` method of the Shopping Cart Service.
   - Initialized `shoppingCartItemsCount` with the total quantity of products in the cart for the current user.

6. Shopping Cart Component - Replaced `getCart()` with `getCartForCurrentUser()` to initialize the cart data for the current user
   - File: `shopping-cart.component.ts`
   - Initialized `cart` with the cart data for the current user using `getCartForCurrentUser()` method of the Shopping Cart Service.

7. My Orders Component - Added `allOrders` field to store all orders & initialize the orders list for the current user
   - File: `my-orders.component.ts`
   - Added `allOrders` field to store all orders for the current user.
   - Initialized the orders list for the logged-in user by using `allOrders` based on the current user id.

8. Updated `placeOrder()` method in Checkout Component to Save the order local storage for the current user
   - File: `checkout.component.ts`
   - Injected `AuthService` in the constructor to access the current user id in `placeOrder()` method.
   - Initialized `cart` with the cart data for the current user using `getCartForCurrentUser()` method of the Shopping Cart Service.
   - On placing the order, save it to `allOrders` map of local storage under the current user id.
   - Initialize `cart` with the current user's cart data using `getCartForCurrentUser()` method.

9. Added `getGuestUser()`, `getUserById()`, `getCurrentUserId()` methods in AuthService
   - File: `auth.service.ts`
   - Added `getGuestUser()` method to get the guest user details.
   - Added `getUserById()` method to fetch the user details by id.
   - Added `getCurrentUserId()` method to get the current user id based on the logged-in user.
   - Need to refactor the methods from AuthService to UserService for better code organization.

10. Updated To-Do List with Pending Tasks & Out of Scope items for better task tracking & management
   - File: `To-Do.txt`
   - Added Bugs & Out of Scope items to the To-Do List for better task tracking and management.
   - Updated the bugs & issues list with the latest pending tasks and out of scope items.

----------------------------------------------------------------------------------------------------

Commit: #58 - Designed the layout for Options Menu, Testing Menu & Login Components

Time Started: 14th Aug 2K24 - 06:43 PM    |    Time Ended:   14th Aug 2K24 - 07:11 PM    |    Duration:    28 minutes

Changes:
--------

1. Re-designed the layout for Options Menu & Testing Menu Components
   - File: `options-menu.component.html`, `testing-menu.component.html`
   - Designed the layout for the options menu to display the available options for the user.

2. Re-designed the layout for Login Component
    - File: `login.component.html`, `login.component.ts`, `login.component.css`
    - Updated login form layout to improve user experience.

----------------------------------------------------------------------------------------------------

Commit: #57 - Added View Order Component, Updated route and navigation, Enhanced UX with empty cart message & disabled buttons in Shopping Cart and Checkout components

Time Started: 14th Aug 2K24 - 03:51 PM    |    Time Ended:   14th Aug 2K24 - 04:38 PM    |    Duration:    47 minutes

Changes:
--------

1. Added View Order Component
   - File: `view-order.component.html`, `view-order.component.ts`
   - Created a new component to display the details of a single order.
   - Designed the layout to show order details including order id, date, total price, and products.
   - Using ActivatedRoute to fetch the order id from the URL and display the corresponding order details.

2. Added route for View Order Component
   - File: `app.routes.ts`
   - Added a new route for the View Order Component with the path `user/my-orders/:orderId`.

3. Navigation to View Order Component
   - File: `my-orders.component.html`, `my-orders.component.ts`
   - Updated 'View Details' button in the My Orders Component to navigate to the View Order Component.
   - Implemented `viewOrderDetails()` method to navigate to the View Order Component with the order id.

4. Enhanced User Experience by displaying "Your Cart is Empty" message in Shopping Cart Component & Checkout Component
   - File: `shopping-cart.component.html`, `checkout.component.html`
   - Added a message to display when the cart is empty in the Shopping Cart and Checkout Components.
   - The message is shown when there are no products in the cart.
   - Disabled the 'Proceed to Checkout' button in the Shopping Cart Component when the cart is empty.
   - Disabled the 'Place Order' button in the Checkout Component when the cart is empty.


----------------------------------------------------------------------------------------------------

Commit: #56 - Improved cart data initialization and consistency across shopping cart, checkout, and navbar components

Total Time:   37 minutes
- Time Started: 14th Aug 2K24 - 12:47 PM    |    Time Ended:   14th Aug 2K24 - 12:50 PM    |    Duration:    3 minutes
- Time Started: 14th Aug 2K24 - 12:28 PM    |    Time Ended:   14th Aug 2K24 - 12:40 PM    |    Duration:    12 minutes
- Time Started: 14th Aug 2K24 - 11:42 AM    |    Time Ended:   14th Aug 2K24 - 12:07 PM    |    Duration:    25 minutes

Changes:
--------

1. Added `initCartList()` & `initCartProductList()` methods in Shopping Cart Service to properly initialize cart data.
   - File: `shopping-cart.service.ts`
   - Added `initCartList()` method to initialize the cart list from local storage or create a new cart list.
   - Added `initCartProductList()` method to initialize the cart products list using `cart` if available, else create an empty array.
   - Added `getCart()` method to fetch the cart data from local storage or create a new cart if not available.

2. Updated Checkout Component to initialize `cart` correctly using `shoppingCartService.getCart()` method.
   - File: `checkout.component.ts`
   - Updated the `cart` initialization in the Checkout Component to use the `getCart()` method from the Shopping Cart Service.

3. Updated Navbar Component to fetch the total quantity of products in the cart using `shoppingCartService`
   - File: `navbar.component.ts`
   - Removed `fetchShoppingCartItemsCount()` method from the Navbar Component and updated the total quantity calculation using `getCart()` method.

4. Replaced `cartList` with `cart` in Shopping Cart Component and updated the initialization logic.
   - File: `shopping-cart.component.ts`
   - Updated the Shopping Cart Component to use `cart` instead of `cartList` for better consistency.
   - Updated the initialization logic to use `getCart()` method from the Shopping Cart Service.

----------------------------------------------------------------------------------------------------

Commit: #55 - Enhance Order Processing, My Orders Layout, Delivery Form Event Handling, and Fix Cart Initialization & undefined NPE issues

Total Time:   1 hour 14 minutes
- Time Started: 13th Aug 2K24 - 08:50 PM    |    Time Ended:   13th Aug 2K24 - 09:10 PM    |    Duration:    20 minutes
- Time Started: 13th Aug 2K24 - 04:04 PM    |    Time Ended:   13th Aug 2K24 - 04:44 PM    |    Duration:    40 minutes

Changes:
--------

1. Updated Checkout Component with Order Details
   - File: `checkout.component.ts`
   - Added an `order` field to store order details including order number, date, total price, and status.
   - Initialized `orderIdCounter` to generate unique order numbers for each order.
   - `placeOrder()` method to finalize the order and reset the cart after placing the order.

2. Redesigned MyOrders Component
   - File: `my-orders.component.html`, `my-orders.component.ts`
   - Updated the MyOrders Component layout to display the list of orders.
   - Designed the layout for each order with order id, order price, placed on (date), and `view details` button.
   - Updated order list with correct order details on order placement.

3. Added `formDataChange` output event in Delivery Form Component to emit form data changes.
  - File: `delivery-form.component.ts`
  - Added `formDataChange` output event emitter of type `EventEmitter<DeliveryFormData>`.
  - Added an output event emitter to notify the parent component of form data changes.
  - Emits the form data when any field in the form is changed using `(ngModelChange)` event binding.

4. Fixed Minor Bug of Cart Initialization in Shopping Cart Service
  - File: `shopping-cart.service.ts`
  - When cart is reset, the cartProductList was not being initialized properly.
  - Initialized the cart products list if the cart list is not empty, otherwise assign an empty array.

5. Updated `fetchShoppingCartItemsCount()` method in Navbar Component to fix NPE issue with total quantity.
  - File: `navbar.component.ts`
  - Updated the method to fetch the total quantity of products in the cart.
  - Avoid undefined NPE by checking if the cartProductList is not null before calculating the total quantity.
  - Updated the method to return 0 if the cartProductList is null or empty, else return the total quantity.


----------------------------------------------------------------------------------------------------

Commit: #54 - Added Checkout Button, Initialized Delivery Form Fields, and Updated MyOrders with Dummy Data
Time Started: 13th Aug 2K24 - 03:06 PM    |    Time Ended:   13th Aug 2K24 - 03:23 PM    |    Duration:    17 minutes

Changes:
--------

1. Added 'Checkout' button in Navbar Component
   - File: `navbar.component.html`
   - Added a 'Checkout' button in the Navbar Component for easy access to the checkout page.
   - The button redirects to the checkout page using Angular Router.

2. Updated Delivery Form Component by Initializing Form Fields
   - File: `delivery-form.component.ts`
   - Initialized form fields with default dummy values in the Delivery Form Component.
   - Pre-filled the form fields including name, address, city, state, and pin code for better user experience.

3. Updated MyOrders Component with Dummy Order Data
   - File: `my-orders.component.ts`
   - Added dummy order data in the MyOrders Component for testing purposes.
   - Initialized the order list with dummy order details including order number, date, total price, and status.

----------------------------------------------------------------------------------------------------

Commit: #53 - Added Order Summary & Delivery Form Components in Checkout Component
Time Started: 13th Aug 2K24 - 03:06 PM    |    Time Ended:   13th Aug 2K24 - 03:23 PM    |    Duration:    17 minutes

Changes:
--------

1. Extracted Order Summary & Delivery Form into separate components
   - File: `order-summary.component.html`, `order-summary.component.ts`, `order-summary.component.css`
   - File: `delivery-form.component.html`, `delivery-form.component.ts`, `delivery-form.component.css`
   - Created separate components for Order Summary and Delivery Form within the Checkout Component.
   - Moved the respective HTML and TypeScript code to the new components for better organization and reusability.

2. Updated Checkout Component to include Order Summary & Delivery Form Components
   - File: `checkout.component.html`, `checkout.component.ts`, `checkout.component.css`
   - Updated the Checkout Component to include the Order Summary and Delivery Form components.
   - Imported and added the Order Summary and Delivery Form components to the Checkout Component template.
   - Passed necessary data to the Order Summary and Delivery Form components using Input properties.

----------------------------------------------------------------------------------------------------

Commit: #52 - Updated Checkout Component to Display Order Summary and Delivery Form
Time Started: 13th Aug 2K24 - 08:59 AM    |    Time Ended:   13th Aug 2K24 - 09:43 AM    |    Duration:    44 minutes

Changes:
--------

1. Designed the Checkout Component with Order Summary, and Delivery Form
   - File: `checkout.component.html`, `checkout.component.ts`, `checkout.component.css`
   - Updated the Checkout Component layout to display the order summary and delivery form.
   - Added form fields for delivery details including name, address, city, state, and pin code.
   - Displayed the order summary with product details, quantity, and total price.
   - Added a 'Place Order' button to complete the checkout process.

2. Refactored `path: 'check-out'` to `path: 'checkout'` in `app.routes.ts`

----------------------------------------------------------------------------------------------------

Commit: #51 - Fixed Minor Bug with 'Remove All' Button in Shopping Cart
Time Started: 12th Aug 2K24 - 08:12 PM    |    Time Ended:   11th Aug 2K24 - 08:40 PM    |    Duration:    28 minutes

Changes:
--------

1. Fixed Minor Bug with 'Remove All' Button in Shopping Cart
   - File: `shopping-cart.service.ts`
   - When removing all products from the cart, the product quantity for individual Product Cart Component was not being reset.
   - Updated the `removeAllProductsFromCart()` method to reset `cartProductList` to an empty array after clearing the cart.

2. Refactored `removeAllBtnClick()` method to `clearCartBtnClick()` method in Shopping Cart Component.
   - File: `shopping-cart.component.ts`
   - Renamed the method to `clearCartBtnClick()` for better clarity and consistency.

----------------------------------------------------------------------------------------------------

Commit: #50 - Remove All Products from Shopping Cart
Time Started: 12th Aug 2K24 - 12:17 PM    |    Time Ended:   11th Aug 2K24 - 12:32 PM    |    Duration:    15 minutes

Changes:
--------

1. Remove All Products from Shopping Cart
   - File: `shopping-cart.component.ts`
   - Added a 'removeAllBtnClick()' method to remove all products from the cart.
   - Implemented `removeAllProductsFromCart()` method to clear the cart and reset the total cart price & quantity.

2. Added `fetchShoppingCartItemsCount()` method in Navbar Component to initialize the total quantity of products in the cart.

----------------------------------------------------------------------------------------------------

Commit: #49 - Re-designed Shopping Cart Component
Time Started: 11th Aug 2K24 - 10:19 PM    |    Time Ended:   11th Aug 2K24 - 10:39 PM    |    Duration:    20 minutes


Changes:
--------

1. Re-designed Shopping Cart Component
   - File: `shopping-cart.component.html`, `shopping-cart.component.ts`
   - Updated the Shopping Cart Component layout to display the products added to the cart.
   - Designed a card layout for each product in the cart with product image, name, price, and quantity.
   - Added increment and decrement buttons to update the quantity of products in the cart.
   - Displayed the total price of each product based on the quantity.
   - Added a 'Remove' button to remove products from the cart.
   - Updated the total cart price based on the quantity and price of products in the cart.

----------------------------------------------------------------------------------------------------

Commit: #48 - Updated Navbar Component with Shopping Cart Items Count & Added cartUpdated custom output event
Time Started: 11th Aug 2K24 - 09:50 PM    |    Time Ended:   11th Aug 2K24 - 10:13 PM    |    Duration:    23 minutes


Changes:
--------

1. Added `cartUpdated` output event in Shopping Cart Service to notify the Navbar Component when the cart is updated.

2. Added `shoppingCartItemsCount` in Navbar Component to display the total number of items in the cart.

----------------------------------------------------------------------------------------------------

Commit: #47 - Added Increment & Decrement Quantity Functionality in Product Cart Component
Total Time:   1 hour 14 minutes
- Time Started: 11th Aug 2K24 - 08:51 PM    |    Time Ended:   11th Aug 2K24 - 09:39 PM    |    Duration:    48 minutes
- Time Started: 11th Aug 2K24 - 04:13 PM    |    Time Ended:   11th Aug 2K24 - 04:39 PM    |    Duration:    26 minutes


Changes:
--------

1. Added Increment & Decrement Quantity Functionality in Product Cart Component
   - File: `product-cart.component.html`, `product-cart.component.ts`
   - Added increment and decrement buttons to increase or decrease the quantity of products in the cart.
   - Implemented `incrementQuantity()` and `decrementQuantity()` methods to update the quantity and subtotal price of products in the cart.

2. Added `getProductQuantity()` method in Shopping Cart Service to get the quantity of a product in the cart.
   - File: `shopping-cart.service.ts`
   - Using `getProductQuantity()` method to initialize the `productQuantity` of a product in ProductCardComponent.

3. Updated `price` to `unitPrice` in `assets/products.json` for consistency.
   - File: `assets/products.json`
   - Changed field `price` to `unitPrice` for consistency.

----------------------------------------------------------------------------------------------------

Commit: #46 - Updated Shopping Cart Service with CartProduct List to Avoid Duplicates and Refactored Product & Cart Interface
Time Started: 11th Aug 2K24 - 12:11 PM    |    Time Ended:   11th Aug 2K24 - 12:43 PM    |    Duration:    1 hour 1 minute


Changes:
--------

1. Updated Shopping Cart Service with CartProduct List to avoid duplicates and manage quantity.
   - File: `shopping-cart.service.ts`
   - Updated `cartProductList` from Product[] to CartProduct[] to include quantity and subtotal price for each product in the cart.
   - Updated `addProductToCart()` method to check if the product is already in the cart and update the product to avoid duplicates.

2. Added `CartProduct` Interface to include quantity and subtotal price for each product in the cart.
   - File: `CartProduct.ts`
   - Created this interface to add flexibility of quantity and price for each product in the cart.
   - It stores product details in the cart including id, product, subtotalQuantity, and subtotalPrice.
   - This helps in avoiding confusion with the product price, subtotal price and total cart price.

2. Refactored `Cart` Interface to include `cartProductList` instead of `products`.
   - File: `Cart.ts`
   - Changed field `products` to `cartProductList` in the `Cart` to include quantity and subtotal price for each product in the cart.

3. Refactored `price` to `unitPrice` in Product Interface.
   - File: `Product.ts`
   - Changed field `price` to `unitPrice` in the `Product` interface for better clarity and consistency.
   - List of files that are impacted with Minor 1 Liner Changes due to this refactoring:
      - `Product.ts`, `manage-products.component.html`, `shopping-cart.component.html`
      - `product-card.component.html`, `product-card.component.ts`,
      - `product-form.component.html`, `product-form.component.ts`,


----------------------------------------------------------------------------------------------------

Commit: #45 - Updated Shopping Cart Component & Added Cart List in Shopping Cart Service
Total Time:   1 hour 46 minutes
Batch Time Entries: 3
  - Time Started: 11th Aug 2K24 - 10:51 AM    |    Time Ended:   11th Aug 2K24 - 10:56 AM    |    Duration:    5 minutes
  - Time Started: 11th Aug 2K24 - 11:13 AM    |    Time Ended:   11th Aug 2K24 - 11:35 AM    |    Duration:    22 minutes
  - Time Started: 11th Aug 2K24 - 11:37 AM    |    Time Ended:   11th Aug 2K24 - 11:56 AM    |    Duration:    19 minutes

Changes:
--------

1. Updated Shopping Cart Service with Cart List and Add to Cart Functionality
   - File: `shopping-cart.service.ts`
   - Added Cart List to store products added to the cart.
   - Storing 'shopping-cart' key in local storage to persist multiple carts (different users) data including user, products, price, and quantity.
   - Removed 'shopping-cart-products' key from local storage.
   - Added `getEmptyCartForGuestUser()` method to create an empty cart for guest users.
   - Initialize carts list from local storage when the service is created.
   - Using `cartProductList` to store products in the cart for the first cart (guest user).
   - Implemented `addToCart()` method to add products to the cart by pushing the product to the `cartProductList` & updating the local storage.

2. Updated Shopping Cart Component
   - File: `shopping-cart.component.html`, `shopping-cart.component.ts`
   - Updated the Shopping Cart Component to display the products added to the cart.
   - Basic Design and layout for the Shopping Cart Component displaying dummy user, price & quantity details in the cart.
   - Using Cart List from the Shopping Cart Service to display cart items in the template.

3. Added Cart interface in the Shopping Cart Service to define the structure of the cart items.

4. Removed AuthGuard from the Shopping Cart Component to allow access to all users including Guest User.

----------------------------------------------------------------------------------------------------

Commit: #44 - Added Shopping Cart Service
Time Started: 11th Aug 2K24 - 08:09 AM    |    Time Ended:   11th Aug 2K24 - 09:10 AM    |    Duration:    1 hour 1 minute

Changes:
--------

1. Added Shopping Cart Service
   - File: `shopping-cart.service.ts`
   - Created a new service to manage the shopping cart functionality.
   - Initialized the cart as an empty array of products on startup in constructor of the service.
   - Implemented methods to add products in the cart.

----------------------------------------------------------------------------------------------------

Commit: #43 - Added Sticky behavior to Navbar & Category Components  |  Redesigned Product Card Component
Time Started: 10th Aug 2K24 - 08:53 PM    |    Time Ended:   10th Aug 2K24 - 09:26 PM    |    Duration:    33 minutes

Changes:
--------

1. Updated Navbar & Category Components to be Sticky
   - Updated Navbar Component to be sticky at the top of the page.
   - Updated Category Component to be sticky on the top of the page right below the Navbar.
   - Added `sticky`, `top-0` and `z-50` Tailwind CSS classes to the Navbar Component.
   - Added `sticky` and `top-24` Tailwind CSS classes to the Category Component.

2. Redesigned Product Card Component
   - Aligned the Price & Add to Cart button to the bottom of the card.
   - Used Tailwind CSS classes for styling the card layout.

----------------------------------------------------------------------------------------------------

Commit: #42 - Extracted Category List to a new Category Component & Added Product Card Component in Products Component
Time Started: 10th Aug 2K24 - 08:53 PM    |    Time Ended:   10th Aug 2K24 - 09:26 PM    |    Duration:    33 minutes

Changes:
--------

1. Added Product Card Component in Products Component
   - File: `product-card.component.html`, `product-card.component.ts`, `product-card.component.css`
   - Using Product Card Component inside the Products Component to display products.
   - Created a reusable Product Card component to display product details.
   - Used Input properties to pass product data to the component.
   - Designed the card layout with product image, name & price.

2. Extracted Category List to a new Category Component
   - File: `category-list.component.html`, `category-list.component.ts`, `category-list.component.css`
   - Using Category Component inside the Products Component to display categories.
   - Extracted the category list from the Products Component to a new Category Component.
   - Used Input properties to pass category data from the Products Component to the Category Component.

----------------------------------------------------------------------------------------------------

Commit: #41 - Filtering Products by Category in Products Component
Time Started: 10th Aug 2K24 - 08:21 PM    |    Time Ended:   10th Aug 2K24 - 08:41 PM    |    Duration:    20 minutes

Changes:
--------

1. Updated `category` field values of Product model to lowercase in `assets/products.json` for consistency.
2. Added filtering products by category functionality in ProductsComponent.
3. Updated ProductsComponent by adding a `allProductsList` and `filteredProductsList` for category filtering.
4. Using QueryParams of ActivatedRoute to filter products by category in ProductsComponent.

----------------------------------------------------------------------------------------------------

Commit: #40 - Added Categories Sidebar in Products Component
Time Started: 10th Aug 2K24 - 07:45 PM    |    Time Ended:   10th Aug 2K24 - 08:18 PM    |    Duration:    33 minutes

Changes:
--------

1. Added Categories Sidebar in Products Component
   - File: `products.component.html`, `products.component.ts`
   - Added a sidebar to display product categories.
   - Categories are fetched from the `categories` array using CategoryService.

----------------------------------------------------------------------------------------------------

Commit: #39 - Added Products Component in Home & Updated Products Display
Time Started:

Changes:
--------

----------------------------------------------------------------------------------------------------

Commit: #38 - Code Cleanup
Time Started: 9th Aug 2K24    |    Duration:   1 hour 23 minutes

Changes:
--------

1. Removed `loginUser2()`, `login2()` methods from `LoginComponent` and `UserService` as they were not used in the project.
2. Removed hard-coded `userList` from `UserService` as it was replaced with `users.json` data.

----------------------------------------------------------------------------------------------------

Commit: #37 - Search Product Functionality Added in Manage Products Component
Time Started: 8th Aug 2K24 - 01:04 PM    |    Time Ended:   8th Aug 2K24 - 02:07 PM    |    Duration:   1 hour 3 minutes

Changes:
--------

1. Refactored ProductService
   - File: `product.service.ts`
   - Details:
     - Renamed `getProducts()` method to `getAllProducts()` for improved clarity and consistency.

2. Enhanced Manage Products Component
   - File: `manage-products.component.ts`
   - Details:
     - Search Functionality:
       - Introduced search functionality to filter products by name.
       - Replaced `products$` Observable with two lists: `allProductsList` for storing the complete product list and `filteredProductsList` for storing the search-filtered list.
       - Implemented `searchProductsInputChangeListener()` method:
         - Listens for changes in the search input field.
         - Filters `allProductsList` based on the query string and updates `filteredProductsList`.
         - Resets `filteredProductsList` when the search input is cleared.
     - Code Optimization:
       - Removed `refreshProductList()` method as it became redundant with the introduction of individual list updates, leading to performance improvements.
       - Subscription to `getAllProducts()` Observable now initializes both `allProductsList` and `filteredProductsList`, with proper subscription management using `ngOnDestroy()` to avoid memory leaks.
       - Updated template to bind with `filteredProductsList` instead of `products$` for real-time display of search results.

---

Technical Fundamental Elements:
-------------------------------

- Angular Services: ProductService, ActivatedRoute
- Angular Component Properties: allProductsList, filteredProductsList, eventTarget, HTMLInputElement
- Methods: getAllProducts(), searchProductsInputChangeListener(), ngOnDestroy()

----------------------------------------------------------------------------------------------------

Commit: #36 - Delete Product Functionality Added
Time Started: 8th Aug 2K24 - 11:32 AM    |    Time Ended:   8th Aug 2K24 - 11:56 AM    |    Duration:    24 minutes

Changes:
--------

1. Updated ProductService
   - File: `product.service.ts`
   - Details:
     - Simplified `loadInitialData()` by moving the conditional check from the constructor to the method body.
     - Added `deleteProductById()` method to handle product deletion.

2. Updated App Component
   - File: `app.component.ts`
   - Details:
     - Injected `ProductService` in the constructor to access `loadInitialData()` in `resetLocalStorage()` method.
     - Called `loadInitialData()` in `resetLocalStorage()` after removing the `products` key from local storage to ensure products display correctly on the initial visit to the Manage Products page.

3. Enhanced Product Form Component
   - File: `product-form.component.ts`
   - Details:
     - Added `deleteProductBtnClicked()` click listener on `delete` button in the product form to enable product deletion.
     - Implemented `deleteProductBtnClicked()` method:
       - Utilizes a confirmation dialog to confirm deletion.
       - Calls `deleteProductById()` from `ProductService` to delete the product.
       - Navigates back to the Manage Products page after deletion.

4. Improved Manage Products Component
   - File: `manage-products.component.ts`
   - Details:
     - Injected `ProductService` in the constructor to access `deleteProductById()` and `getProducts()` methods.
     - Added `deleteProductBtnClicked()` method to handle product deletion:
       - Utilizes a confirmation dialog to confirm deletion.
       - Calls `deleteProductById()` from `ProductService` to delete the product.
       - Reloads the product list after deletion using `getProducts()` method from `ProductService`.

---

Technical Fundamental Elements:
-------------------------------

- Angular Services: ProductService, ActivatedRoute
- Angular Component Properties: product, products$
- Methods: deleteProductById(), loadInitialData(), resetLocalStorage(), deleteProductBtnClicked(), getProducts()

----------------------------------------------------------------------------------------------------

Commit: #35 - Update Product Details Functionality
Time Started: 8th Aug 2K24 - 10:01 AM    |    Time Ended:   8th Aug 2K24 - 10:17 AM    |    Duration:    16 minutes (Extra 6 Mins from before)

Changes:
--------

1. Update Product Details Functionality
   - Files: `product.service.ts`, `product-form.component.ts`
   - Details:
     - Added `updateProduct()` method in `ProductService` to handle updating product details.
     - Refactored `createProduct()` to `addProduct()` for naming consistency in `ProductService`.
     - Reset `product` field in `ProductFormComponent` for new product creation using `ActivatedRoute`.
     - Updated `save()` method to distinguish between updating existing products and adding new products using `updateProduct()` and `addProduct()` methods.

2. Future Enhancements Note
   - File: `app.component.ts`
   - Details:
     - To-Do Note added for future updates.
     - Need to improve the data re-initialization process on startup to ensure products are displayed correctly on the first visit to the Manage Products page.


Technical Fundamental Elements:
-------------------------------

- Angular Component Properties: product, ActivatedRoute, ProductService
- Angular Methods: updateProduct(), addProduct()


Components and Features:
------------------------

1. ProductService:
   - Methods:
     - `updateProduct(updatedProduct: Product)`: Updates product details in local storage.
     - `addProduct(product: Product)`: Adds a new product to local storage.

2. ProductFormComponent:
   - Class:
     - Resets `product` for new product creation when the route parameter indicates a new product.
     - `save()`: Handles form submission by either updating an existing product or adding a new product based on the presence of `product.id`.

----------------------------------------------------------------------------------------------------

Commit: #34 - Edit Product Functionality and UI Enhancements
Time Started: 8th Aug 2K24 - 06:47 AM    |    Time Ended:   8th Aug 2K24 - 08:18 AM    |    Duration:  1 hour 31 minutes

Changes:
--------

1. Edit Product Functionality
    File: `app.routes.ts`
    - Added route `'admin/manage-products/:productId'` to enable product editing.

    File: `product.service.ts`
    - Introduced `getProductById()` method in `ProductService` to fetch a product by ID.

    File: `product-form.component.ts`
    - Initialized `product` in `ProductFormComponent` using `ActivatedRoute` and `getProductById()`.
    - initializeEmptyProduct() method added in Product Form Component to handle undefined product.

2. UI and Form Enhancements
    File: `product-form.component.html`
    - Product Form now uses 2-way binding syntax for product fields (E.g. [(ngModel)]="product.name")
    - Updated Product Card Template to use product properties (E.g. product.name, product.price, product.imageUrl)
    - Updated Currency Pipe in templates to use 'INR' as the currency code.

    Files: `product.ts`, `assets/products.json`
    - Refactored `url` to `imageUrl` in product model and `assets/products.json` JSON for consistency.

3. App Initialization
    File: `app.component.ts`
    - Reset local storage on app initialization by invoking `this.resetLocalStorage();` in the constructor.

---

Technical Fundamental Elements:
-------------------------------

- Angular Directives: ngModel
- Angular Pipes: currency
- Angular Component Members: product, productId, resetLocalStorage


Components and Features:
------------------------

1. ManageProductsComponent:
   - Imports: CurrencyPipe
   - Template:
     - Currency formatting for product prices to display in INR.

2. ProductFormComponent:
   - Imports: ActivatedRoute, NgModel
   - Template:
     - Form fields with two-way data binding.
   - Class:
     - Initializes `product` using `ActivatedRoute` and `ProductService`.
     - Methods for initializing empty product and handling form submission.

3. ProductService:
   - Methods:
     - `getProductById()`: Fetches product details based on ID.

----------------------------------------------------------------------------------------------------

Commit: #33 - Display Product List in Manage Products Component
Time Started: 8th Aug 2K24 - 06:02 AM    |    Time Ended:   8th Aug 2K24 - 06:32 AM    |    Duration:    30 minutes

Changes:
--------

1. Displayed Product List in Manage Products Component
  - File: `manage-products.component.html`
  - Designed the layout to display a list of products in a table-like structure
  - Includes buttons for adding, editing, and deleting products
  - Used the async pipe to subscribe to the products$ Observable and display the list of products

2. Added products$ Observable in Manage Products Component
  - File: `manage-products.component.ts`
  - Created a products$ Observable to store the list of products.
  - Initialized the products$ using the getProducts() method from the ProductService.

3. Refactored Product 'Title' to 'Name' in Product Form, JSON, and Product Card
  - File: `product-form.component.html`   - Updated the form field from 'Title' to 'Name' for consistency.
  - File: `assets/products.json`          - Updated the 'title' property to 'name' for all products.
  - File: `product-card.component.html`   - Updated the product card to display the 'name' instead of 'title'.

4. Removed `original-products.json` file
  - File: `assets/original-products.json`
  - Removed the original-products.json file as it was redundant and not used in the project.


Technical Fundamental Elements:
-------------------------------

- Angular Directives: *ngIf, *ngFor, ng-template
- Angular Pipes: currency, async
- Angular Component Properties: products$, ProductService
- HTML Elements: div, h1, a, button, p


Components and Features:
------------------------

- ManageProductsComponent:
  - Imports: RouterLink, NgIf, NgFor, CurrencyPipe, AsyncPipe
  - Template:
    - Displays a list of products in a table-like structure
    - Includes buttons for adding, editing, and deleting products
    - Supports dark mode styling
  - Class:
    - Fetches products using ProductService
    - Uses an Observable to manage the product list

----------------------------------------------------------------------------------------------------

Commit: #32 - Enhanced Product Form with Validations and Navigation
Time Started: 7th Aug 2K24 - 02:03 PM    |    Time Ended:   7th Aug 2K24 - 02:30 PM    |    Duration:    27 minutes

Changes:
--------

1. Updated Product Form
  - File: `product-form.component.html`
  - Changed form submission to check if the form is valid.
    - Updated `(ngSubmit)="save(formElement.value)"` to `(ngSubmit)="save(formElement)"`
  - Added a pointer cursor for the Submit button using `cursor-pointer` Tailwind CSS class.
  - Added a message to show when the form is invalid. `div` with `ngIf="formSubmitAttempt && formElement.invalid"`
  - Added currency formatting for the price in the Product Card. (Used `currency:'INR':true` pipe)

2. Updated Product Form Component
  - File: `product-form.component.ts`
  - Added a flag to track if the form has been submitted. (`formSubmitAttempt: boolean = false;`)
  - Added navigation to another page after form submission. (`this.router.navigate(['/admin/manage-products']);`)
  - Updated the save method to check if the form is valid before submitting. (`if (formElement.invalid) return;`)


Technical Elements Involved:
----------------------------

- `template reference variables`: Used to access form field values in the template.
- `ngSubmit` event: Used to handle form submission.
- `cursor-pointer`: A Tailwind CSS class to change the cursor to a pointer on hover.
- `ngIf` directive: Used to conditionally render elements in the template.
- `currency` pipe: Used to format numbers as currency.
- `router.navigate`: Used to navigate to a different route programmatically.
- `formElement`: A reference to the form element in the template.
- `formElement.invalid`: A property that returns true if the form is invalid.
- `formElement.value`: Used to access form field values in the template.
- `formSubmitAttempt`: A custom boolean flag to track if the form has been submitted.

----------------------------------------------------------------------------------------------------

Commit: #31 - Enhanced Product Form by Adding Product Card Design
Time Started: 7th Aug 2K24 - 12:13 PM    |    Time Ended:   7th Aug 2K24 - 12:31 PM    |    Duration:    18 minutes

Changes:
--------

1. Updated Product Form & Added Product Card Design
  - File: `product-form.component.html`
  - Added Product Card section to display product details.
  - Using template reference variables (`#title`, `#price`, `#imageUrl`) to form fields for binding values to the product card.
  - Set fixed dimensions for the product image to avoid overflow.
  - Vertically centered the product card section using flexbox properties.


Technical Fundamental Elements:
-------------------------------

- `template reference variables`: Used to access form field values in the template.
- `object-cover`: A Tailwind CSS class to ensure the image covers the given dimensions without distortion.
- flexbox properties: Used to center elements vertically and horizontally.

----------------------------------------------------------------------------------------------------

Commit: #30 - Added Minimum Price Validation in Product Form
Time Stamp: 7th Aug 2K24 - 11:56 AM

Changes:
--------

1. Updated Price Validation in Product Form Template
  - File: `product-form.component.html`
  - Added `min` attribute to the price input field to ensure the price is at least 0.
  - Added error message to display when the price is less than 0.

Practice Required:
------------------

1. Technical Fundamental Elements:
  - `min`: A property that sets the minimum value for the input field.
  - `errors`: An object that contains validation errors for the form field.
  - Bracket notation: Used to access properties from an object when the property name is dynamic or contains special characters.

----------------------------------------------------------------------------------------------------

Commit: #29 - Displaying Validation Errors in Product Form

File Changes:
-------------

1. `product-form.component.html`
  - Added basic form validations for the product form fields.
  - Template reference variables (E.g. `#title`) added for each form field to access their values.
  - Using `invalid`, `dirty`, and `touched` properties to display validation errors for each form field.

2. `product-form.component.ts`
  - ngIf directive added to display error messages for each form field.


Need To Practice:
-----------------

1. Technical Fundamental Elements:
  - `invalid`: A property that returns true if the form field is invalid (E.g. null, empty, or not meeting validation criteria).
  - `dirty`: A property that returns true if the form field has been modified.
  - `touched`: A property that returns true if the form field has been focused and then blurred.
  - `blur`: An event that occurs when a form field loses focus.
  - `ngModel` directive: A directive used to bind form fields to Angular forms.
  - `ngModel` properties & events: `ngModel.invalid`, `ngModel.dirty`, `ngModel.touched`.

----------------------------------------------------------------------------------------------------

Commit: #28 - Automation Testing Feature for Quick User Login - Testing Options Menu Component

File Changes:
1. `user.service.ts`
  - When fetching user data from nested routes using getUsers() method, `usersUrl` caused issues due to relative paths.
  - Updated the `usersUrl` variable to start with '/' to avoid issues with relative paths.
  - Before:   ` usersUrl: string = 'assets/users.json'; `
  - After:    ` usersUrl: string = '/assets/users.json'; `

2. Created Testing Menu Component:
  - Added a new component `testing-menu` to the project for testing purposes.
  - The component includes a menu with various testing options and functionalities.
  - Testing options include Login Admin & Test User buttons for quick access to admin and test user profiles.

3. Updated Navbar Component:
  - Added a new Button to the Testing Menu component in the navbar for easy access.

----------------------------------------------------------------------------------------------------

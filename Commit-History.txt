
Time Stamp: 7th Aug 2K24 - 09:57 AM..!!

Title: G-Shop - Commit History - Change Log

Category: Documentation -> Commit History -> Change Log

Keywords: Angular, G-Shop, Commit History, Change Log, Version Control, Documentation

Purpose: Track changes and updates of each Commit in the G-Shop project for version control and documentation.

Version: 0.1

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/

----------------------------------------------------------------------------------------------------


Commit History - Change Log
---------------------------

Commit: #31 - Enhanced Product Form by Adding Product Card Design
Time Started: 7th Aug 2K24 - 12:13 PM    |    Time Ended:   7th Aug 2K24 - 12:31 PM    |    Duration:    18 minutes

Changes:
--------

1. Updated Product Form & Added Product Card Design
  - File: `product-form.component.html`
  - Added Product Card section to display product details.
  - Using template reference variables (`#title`, `#price`, `#imageUrl`) to form fields for binding values to the product card.
  - Set fixed dimensions for the product image to avoid overflow.
  - Vertically centered the product card section using flexbox properties.


Technical Fundamental Elements:
-------------------------------

- `template reference variables`: Used to access form field values in the template.
- `object-cover`: A Tailwind CSS class to ensure the image covers the given dimensions without distortion.
- flexbox properties: Used to center elements vertically and horizontally.

----------------------------------------------------------------------------------------------------

Commit: #30 - Added Minimum Price Validation in Product Form
Time Stamp: 7th Aug 2K24 - 11:56 AM

Changes:
--------

1. Updated Price Validation in Product Form Template
  - File: `product-form.component.html`
  - Added `min` attribute to the price input field to ensure the price is at least 0.
  - Added error message to display when the price is less than 0.

Practice Required:
------------------

1. Technical Fundamental Elements:
  - `min`: A property that sets the minimum value for the input field.
  - `errors`: An object that contains validation errors for the form field.
  - Bracket notation: Used to access properties from an object when the property name is dynamic or contains special characters.

----------------------------------------------------------------------------------------------------

Commit: #29 - Displaying Validation Errors in Product Form

File Changes:
-------------

1. `product-form.component.html`
  - Added basic form validations for the product form fields.
  - Template reference variables (E.g. `#title`) added for each form field to access their values.
  - Using `invalid`, `dirty`, and `touched` properties to display validation errors for each form field.

2. `product-form.component.ts`
  - ngIf directive added to display error messages for each form field.


Need To Practice:
-----------------

1. Technical Fundamental Elements:
  - `invalid`: A property that returns true if the form field is invalid (E.g. null, empty, or not meeting validation criteria).
  - `dirty`: A property that returns true if the form field has been modified.
  - `touched`: A property that returns true if the form field has been focused and then blurred.
  - `blur`: An event that occurs when a form field loses focus.
  - `ngModel` directive: A directive used to bind form fields to Angular forms.
  - `ngModel` properties & events: `ngModel.invalid`, `ngModel.dirty`, `ngModel.touched`.

----------------------------------------------------------------------------------------------------

Commit: #28 - Automation Testing Feature for Quick User Login - Testing Options Menu Component

File Changes:
1. `user.service.ts`
  - When fetching user data from nested routes using getUsers() method, `usersUrl` caused issues due to relative paths.
  - Updated the `usersUrl` variable to start with '/' to avoid issues with relative paths.
  - Before:   ` usersUrl: string = 'assets/users.json'; `
  - After:    ` usersUrl: string = '/assets/users.json'; `

2. Created Testing Menu Component:
  - Added a new component `testing-menu` to the project for testing purposes.
  - The component includes a menu with various testing options and functionalities.
  - Testing options include Login Admin & Test User buttons for quick access to admin and test user profiles.

3. Updated Navbar Component:
  - Added a new Button to the Testing Menu component in the navbar for easy access.

----------------------------------------------------------------------------------------------------

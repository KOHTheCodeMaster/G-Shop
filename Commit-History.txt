
Time Stamp: 7th Aug 2K24 - 09:57 AM..!!

Title: G-Shop - Commit History - Change Log

Category: Documentation -> Commit History -> Change Log

Keywords: Angular, G-Shop, Commit History, Change Log, Version Control, Documentation

Purpose: Track changes and updates of each Commit in the G-Shop project for version control and documentation.

Version: 0.1

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/

----------------------------------------------------------------------------------------------------


Commit History - Change Log
---------------------------

Commit: #39 - Added Products Component in Home & Updated Products Display
Time Started: 10th Aug 2K24 - 12:23 PM    |    Time Ended:   10th Aug 2K24 - 01:53 PM    |    Duration:    1 hour 30 minutes

Changes:
--------

1. Cleaned up the code by removing the unnecessary `isAdmin` property from the AuthService.
2. Added ProductsComponent in HomeComponent for product display.
3. Updated ProductsComponent to display product list using `products$` & Added 1-second delay for data loading.
4. Updated Products Image Urls in `assets/products.json`.

----------------------------------------------------------------------------------------------------

Commit: #38 - Code Cleanup
Time Started: 9th Aug 2K24    |    Duration:   1 hour 23 minutes

Changes:
--------

1. Removed `loginUser2()`, `login2()` methods from `LoginComponent` and `UserService` as they were not used in the project.
2. Removed hard-coded `userList` from `UserService` as it was replaced with `users.json` data.

----------------------------------------------------------------------------------------------------

Commit: #37 - Search Product Functionality Added in Manage Products Component
Time Started: 8th Aug 2K24 - 01:04 PM    |    Time Ended:   8th Aug 2K24 - 02:07 PM    |    Duration:   1 hour 3 minutes

Changes:
--------

1. Refactored ProductService
   - File: `product.service.ts`
   - Details:
     - Renamed `getProducts()` method to `getAllProducts()` for improved clarity and consistency.

2. Enhanced Manage Products Component
   - File: `manage-products.component.ts`
   - Details:
     - Search Functionality:
       - Introduced search functionality to filter products by name.
       - Replaced `products$` Observable with two lists: `allProductsList` for storing the complete product list and `filteredProductsList` for storing the search-filtered list.
       - Implemented `searchProductsInputChangeListener()` method:
         - Listens for changes in the search input field.
         - Filters `allProductsList` based on the query string and updates `filteredProductsList`.
         - Resets `filteredProductsList` when the search input is cleared.
     - Code Optimization:
       - Removed `refreshProductList()` method as it became redundant with the introduction of individual list updates, leading to performance improvements.
       - Subscription to `getAllProducts()` Observable now initializes both `allProductsList` and `filteredProductsList`, with proper subscription management using `ngOnDestroy()` to avoid memory leaks.
       - Updated template to bind with `filteredProductsList` instead of `products$` for real-time display of search results.

---

Technical Fundamental Elements:
-------------------------------

- Angular Services: ProductService, ActivatedRoute
- Angular Component Properties: allProductsList, filteredProductsList, eventTarget, HTMLInputElement
- Methods: getAllProducts(), searchProductsInputChangeListener(), ngOnDestroy()

----------------------------------------------------------------------------------------------------

Commit: #36 - Delete Product Functionality Added
Time Started: 8th Aug 2K24 - 11:32 AM    |    Time Ended:   8th Aug 2K24 - 11:56 AM    |    Duration:    24 minutes

Changes:
--------

1. Updated ProductService
   - File: `product.service.ts`
   - Details:
     - Simplified `loadInitialData()` by moving the conditional check from the constructor to the method body.
     - Added `deleteProductById()` method to handle product deletion.

2. Updated App Component
   - File: `app.component.ts`
   - Details:
     - Injected `ProductService` in the constructor to access `loadInitialData()` in `resetLocalStorage()` method.
     - Called `loadInitialData()` in `resetLocalStorage()` after removing the `products` key from local storage to ensure products display correctly on the initial visit to the Manage Products page.

3. Enhanced Product Form Component
   - File: `product-form.component.ts`
   - Details:
     - Added `deleteProductBtnClicked()` click listener on `delete` button in the product form to enable product deletion.
     - Implemented `deleteProductBtnClicked()` method:
       - Utilizes a confirmation dialog to confirm deletion.
       - Calls `deleteProductById()` from `ProductService` to delete the product.
       - Navigates back to the Manage Products page after deletion.

4. Improved Manage Products Component
   - File: `manage-products.component.ts`
   - Details:
     - Injected `ProductService` in the constructor to access `deleteProductById()` and `getProducts()` methods.
     - Added `deleteProductBtnClicked()` method to handle product deletion:
       - Utilizes a confirmation dialog to confirm deletion.
       - Calls `deleteProductById()` from `ProductService` to delete the product.
       - Reloads the product list after deletion using `getProducts()` method from `ProductService`.

---

Technical Fundamental Elements:
-------------------------------

- Angular Services: ProductService, ActivatedRoute
- Angular Component Properties: product, products$
- Methods: deleteProductById(), loadInitialData(), resetLocalStorage(), deleteProductBtnClicked(), getProducts()

----------------------------------------------------------------------------------------------------

Commit: #35 - Update Product Details Functionality
Time Started: 8th Aug 2K24 - 10:01 AM    |    Time Ended:   8th Aug 2K24 - 10:17 AM    |    Duration:    16 minutes (Extra 6 Mins from before)

Changes:
--------

1. Update Product Details Functionality
   - Files: `product.service.ts`, `product-form.component.ts`
   - Details:
     - Added `updateProduct()` method in `ProductService` to handle updating product details.
     - Refactored `createProduct()` to `addProduct()` for naming consistency in `ProductService`.
     - Reset `product` field in `ProductFormComponent` for new product creation using `ActivatedRoute`.
     - Updated `save()` method to distinguish between updating existing products and adding new products using `updateProduct()` and `addProduct()` methods.

2. Future Enhancements Note
   - File: `app.component.ts`
   - Details:
     - To-Do Note added for future updates.
     - Need to improve the data re-initialization process on startup to ensure products are displayed correctly on the first visit to the Manage Products page.


Technical Fundamental Elements:
-------------------------------

- Angular Component Properties: product, ActivatedRoute, ProductService
- Angular Methods: updateProduct(), addProduct()


Components and Features:
------------------------

1. ProductService:
   - Methods:
     - `updateProduct(updatedProduct: Product)`: Updates product details in local storage.
     - `addProduct(product: Product)`: Adds a new product to local storage.

2. ProductFormComponent:
   - Class:
     - Resets `product` for new product creation when the route parameter indicates a new product.
     - `save()`: Handles form submission by either updating an existing product or adding a new product based on the presence of `product.id`.

----------------------------------------------------------------------------------------------------

Commit: #34 - Edit Product Functionality and UI Enhancements
Time Started: 8th Aug 2K24 - 06:47 AM    |    Time Ended:   8th Aug 2K24 - 08:18 AM    |    Duration:  1 hour 31 minutes

Changes:
--------

1. Edit Product Functionality
    File: `app.routes.ts`
    - Added route `'admin/manage-products/:productId'` to enable product editing.

    File: `product.service.ts`
    - Introduced `getProductById()` method in `ProductService` to fetch a product by ID.

    File: `product-form.component.ts`
    - Initialized `product` in `ProductFormComponent` using `ActivatedRoute` and `getProductById()`.
    - initializeEmptyProduct() method added in Product Form Component to handle undefined product.

2. UI and Form Enhancements
    File: `product-form.component.html`
    - Product Form now uses 2-way binding syntax for product fields (E.g. [(ngModel)]="product.name")
    - Updated Product Card Template to use product properties (E.g. product.name, product.price, product.imageUrl)
    - Updated Currency Pipe in templates to use 'INR' as the currency code.

    Files: `product.ts`, `assets/products.json`
    - Refactored `url` to `imageUrl` in product model and `assets/products.json` JSON for consistency.

3. App Initialization
    File: `app.component.ts`
    - Reset local storage on app initialization by invoking `this.resetLocalStorage();` in the constructor.

---

Technical Fundamental Elements:
-------------------------------

- Angular Directives: ngModel
- Angular Pipes: currency
- Angular Component Members: product, productId, resetLocalStorage


Components and Features:
------------------------

1. ManageProductsComponent:
   - Imports: CurrencyPipe
   - Template:
     - Currency formatting for product prices to display in INR.

2. ProductFormComponent:
   - Imports: ActivatedRoute, NgModel
   - Template:
     - Form fields with two-way data binding.
   - Class:
     - Initializes `product` using `ActivatedRoute` and `ProductService`.
     - Methods for initializing empty product and handling form submission.

3. ProductService:
   - Methods:
     - `getProductById()`: Fetches product details based on ID.

----------------------------------------------------------------------------------------------------

Commit: #33 - Display Product List in Manage Products Component
Time Started: 8th Aug 2K24 - 06:02 AM    |    Time Ended:   8th Aug 2K24 - 06:32 AM    |    Duration:    30 minutes

Changes:
--------

1. Displayed Product List in Manage Products Component
  - File: `manage-products.component.html`
  - Designed the layout to display a list of products in a table-like structure
  - Includes buttons for adding, editing, and deleting products
  - Used the async pipe to subscribe to the products$ Observable and display the list of products

2. Added products$ Observable in Manage Products Component
  - File: `manage-products.component.ts`
  - Created a products$ Observable to store the list of products.
  - Initialized the products$ using the getProducts() method from the ProductService.

3. Refactored Product 'Title' to 'Name' in Product Form, JSON, and Product Card
  - File: `product-form.component.html`   - Updated the form field from 'Title' to 'Name' for consistency.
  - File: `assets/products.json`          - Updated the 'title' property to 'name' for all products.
  - File: `product-card.component.html`   - Updated the product card to display the 'name' instead of 'title'.

4. Removed `original-products.json` file
  - File: `assets/original-products.json`
  - Removed the original-products.json file as it was redundant and not used in the project.


Technical Fundamental Elements:
-------------------------------

- Angular Directives: *ngIf, *ngFor, ng-template
- Angular Pipes: currency, async
- Angular Component Properties: products$, ProductService
- HTML Elements: div, h1, a, button, p


Components and Features:
------------------------

- ManageProductsComponent:
  - Imports: RouterLink, NgIf, NgFor, CurrencyPipe, AsyncPipe
  - Template:
    - Displays a list of products in a table-like structure
    - Includes buttons for adding, editing, and deleting products
    - Supports dark mode styling
  - Class:
    - Fetches products using ProductService
    - Uses an Observable to manage the product list

----------------------------------------------------------------------------------------------------

Commit: #32 - Enhanced Product Form with Validations and Navigation
Time Started: 7th Aug 2K24 - 02:03 PM    |    Time Ended:   7th Aug 2K24 - 02:30 PM    |    Duration:    27 minutes

Changes:
--------

1. Updated Product Form
  - File: `product-form.component.html`
  - Changed form submission to check if the form is valid.
    - Updated `(ngSubmit)="save(formElement.value)"` to `(ngSubmit)="save(formElement)"`
  - Added a pointer cursor for the Submit button using `cursor-pointer` Tailwind CSS class.
  - Added a message to show when the form is invalid. `div` with `ngIf="formSubmitAttempt && formElement.invalid"`
  - Added currency formatting for the price in the Product Card. (Used `currency:'INR':true` pipe)

2. Updated Product Form Component
  - File: `product-form.component.ts`
  - Added a flag to track if the form has been submitted. (`formSubmitAttempt: boolean = false;`)
  - Added navigation to another page after form submission. (`this.router.navigate(['/admin/manage-products']);`)
  - Updated the save method to check if the form is valid before submitting. (`if (formElement.invalid) return;`)


Technical Elements Involved:
----------------------------

- `template reference variables`: Used to access form field values in the template.
- `ngSubmit` event: Used to handle form submission.
- `cursor-pointer`: A Tailwind CSS class to change the cursor to a pointer on hover.
- `ngIf` directive: Used to conditionally render elements in the template.
- `currency` pipe: Used to format numbers as currency.
- `router.navigate`: Used to navigate to a different route programmatically.
- `formElement`: A reference to the form element in the template.
- `formElement.invalid`: A property that returns true if the form is invalid.
- `formElement.value`: Used to access form field values in the template.
- `formSubmitAttempt`: A custom boolean flag to track if the form has been submitted.

----------------------------------------------------------------------------------------------------

Commit: #31 - Enhanced Product Form by Adding Product Card Design
Time Started: 7th Aug 2K24 - 12:13 PM    |    Time Ended:   7th Aug 2K24 - 12:31 PM    |    Duration:    18 minutes

Changes:
--------

1. Updated Product Form & Added Product Card Design
  - File: `product-form.component.html`
  - Added Product Card section to display product details.
  - Using template reference variables (`#title`, `#price`, `#imageUrl`) to form fields for binding values to the product card.
  - Set fixed dimensions for the product image to avoid overflow.
  - Vertically centered the product card section using flexbox properties.


Technical Fundamental Elements:
-------------------------------

- `template reference variables`: Used to access form field values in the template.
- `object-cover`: A Tailwind CSS class to ensure the image covers the given dimensions without distortion.
- flexbox properties: Used to center elements vertically and horizontally.

----------------------------------------------------------------------------------------------------

Commit: #30 - Added Minimum Price Validation in Product Form
Time Stamp: 7th Aug 2K24 - 11:56 AM

Changes:
--------

1. Updated Price Validation in Product Form Template
  - File: `product-form.component.html`
  - Added `min` attribute to the price input field to ensure the price is at least 0.
  - Added error message to display when the price is less than 0.

Practice Required:
------------------

1. Technical Fundamental Elements:
  - `min`: A property that sets the minimum value for the input field.
  - `errors`: An object that contains validation errors for the form field.
  - Bracket notation: Used to access properties from an object when the property name is dynamic or contains special characters.

----------------------------------------------------------------------------------------------------

Commit: #29 - Displaying Validation Errors in Product Form

File Changes:
-------------

1. `product-form.component.html`
  - Added basic form validations for the product form fields.
  - Template reference variables (E.g. `#title`) added for each form field to access their values.
  - Using `invalid`, `dirty`, and `touched` properties to display validation errors for each form field.

2. `product-form.component.ts`
  - ngIf directive added to display error messages for each form field.


Need To Practice:
-----------------

1. Technical Fundamental Elements:
  - `invalid`: A property that returns true if the form field is invalid (E.g. null, empty, or not meeting validation criteria).
  - `dirty`: A property that returns true if the form field has been modified.
  - `touched`: A property that returns true if the form field has been focused and then blurred.
  - `blur`: An event that occurs when a form field loses focus.
  - `ngModel` directive: A directive used to bind form fields to Angular forms.
  - `ngModel` properties & events: `ngModel.invalid`, `ngModel.dirty`, `ngModel.touched`.

----------------------------------------------------------------------------------------------------

Commit: #28 - Automation Testing Feature for Quick User Login - Testing Options Menu Component

File Changes:
1. `user.service.ts`
  - When fetching user data from nested routes using getUsers() method, `usersUrl` caused issues due to relative paths.
  - Updated the `usersUrl` variable to start with '/' to avoid issues with relative paths.
  - Before:   ` usersUrl: string = 'assets/users.json'; `
  - After:    ` usersUrl: string = '/assets/users.json'; `

2. Created Testing Menu Component:
  - Added a new component `testing-menu` to the project for testing purposes.
  - The component includes a menu with various testing options and functionalities.
  - Testing options include Login Admin & Test User buttons for quick access to admin and test user profiles.

3. Updated Navbar Component:
  - Added a new Button to the Testing Menu component in the navbar for easy access.

----------------------------------------------------------------------------------------------------
